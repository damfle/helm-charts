name: Continuous Integration

on:
  push:
    branches: [main]
    tags-ignore: ['**']
  pull_request:
    branches: [main]

env:
  HELM_VERSION: v3.13.0

permissions:
  contents: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.changes.outputs.changed }}
      charts: ${{ steps.changes.outputs.charts }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed charts
        id: changes
        run: |
          changed_charts=""
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base_ref="${{ github.event.pull_request.base.sha }}"
            head_ref="${{ github.event.pull_request.head.sha }}"
            changed_files=$(git diff --name-only $base_ref..$head_ref)
          else
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              changed_files=$(git diff --name-only HEAD~1 HEAD)
            else
              changed_files=$(git ls-files)
            fi
          fi
          
          for file in $changed_files; do
            if [[ "$file" =~ ^([^/]+)/(Chart\.yaml|values\.yaml|templates/) ]]; then
              chart="${file%%/*}"
              if [[ -f "$chart/Chart.yaml" ]] && [[ ! "$changed_charts" =~ (^|[[:space:]])"$chart"([[:space:]]|$) ]]; then
                changed_charts="${changed_charts:+$changed_charts }$chart"
              fi
            fi
          done
          
          if [[ -n "$changed_charts" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "charts=$changed_charts" >> "$GITHUB_OUTPUT"
            echo "Changed charts: $changed_charts"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No chart changes detected"
          fi

  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - uses: helm/chart-testing-action@v2.6.1

      - name: Lint charts
        run: ct lint --target-branch ${{ github.event.repository.default_branch }}

      - uses: helm/kind-action@v1.8.0

      - name: Test charts
        run: ct install --target-branch ${{ github.event.repository.default_branch }}

  version-and-tag:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.changed == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Bump versions and tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get next build number
          latest_tag=$(git tag -l "r*" --sort=-version:refname | head -n1 || echo "")
          if [[ "$latest_tag" =~ ^r([0-9]+)$ ]]; then
            new_build=$((${BASH_REMATCH[1]} + 1))
          else
            new_build=1
          fi
          build_tag="r$new_build"
          
          # Bump chart versions
          for chart in ${{ needs.detect-changes.outputs.charts }}; do
            current=$(grep '^version:' "$chart/Chart.yaml" | awk '{print $2}')
            IFS='.' read -ra parts <<< "$current"
            new_version="${parts[0]}.${parts[1]}.$((parts[2] + 1))"
            sed -i "s/^version: .*/version: $new_version/" "$chart/Chart.yaml"
            git add "$chart/Chart.yaml"
            echo "Updated $chart: $current -> $new_version"
          done
          
          # Commit and tag
          git commit -m "chore: bump chart versions for release $build_tag"
          git tag "$build_tag"
          git push origin main "$build_tag"
