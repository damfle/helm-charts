# Default values for webdav.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# WebDAV-specific configuration that will be mounted as ConfigMap
config:
  enabled: true
  data:
    banner.txt: |
      Welcome to Damien's WebDAV server.
      Everything here is guarded by a very clingy kitty.
    config.yaml: |
      address: 0.0.0.0
      port: 6065
      
      # TLS-related settings if you want to enable TLS directly.
      tls: false
      # Prefix to apply to the WebDAV path-ing. Default is '/'.
      prefix: /
      
      # Enable or disable debug logging. Default is 'false'.
      debug: false
      
      # Disable sniffing the files to detect their content type. Default is 'false'.
      noSniff: false
      
      # Whether the server runs behind a trusted proxy or not. When this is true,
      # the header X-Forwarded-For will be used for logging the remote addresses
      # of logging attempts (if available).
      behindProxy: true
      
      # The directory that will be able to be accessed by the users when connecting.
      # This directory will be used by users unless they have their own 'directory' defined.
      # Default is '.' (current directory).
      directory: /data
      
      # The default permissions for users. This is a case insensitive option. Possible
      # permissions: C (Create), R (Read), U (Update), D (Delete). You can combine multiple
      # permissions. For example, to allow to read and create, set "RC". Default is "R".
      permissions: R
      
      # The default permissions rules for users. Default is none. Rules are applied
      # from last to first, that is, the first rule that matches the request, starting
      # from the end, will be applied to the request. Rule paths are always relative to
      # the user's directory.
      rules: []
      
      # The behavior of redefining the rules for users. It can be:
      # - overwrite: when a user has rules defined, these will overwrite any global
      #   rules already defined. That is, the global rules are not applicable to the
      #   user.
      # - append: when a user has rules defined, these will be appended to the global
      #   rules already defined. That is, for this user, their own specific rules will
      #   be checked first, and then the global rules.
      # Default is 'overwrite'.
      rulesBehavior: overwrite
      
      # Logging configuration
      log:
        # Logging format ('console', 'json'). Default is 'console'.
        format: console
        # Enable or disable colors. Default is 'true'. Only applied if format is 'console'.
        colors: true
        # Logging outputs. You can have more than one output. Default is only 'stderr'.
        outputs:
        - stderr
      
      # CORS configuration
      cors:
        # Whether or not CORS configuration should be applied. Default is 'false'.
        enabled: true
        credentials: true
        allowed_headers:
          - Depth
        allowed_hosts:
          - http://localhost:8080
        allowed_methods:
          - GET
        exposed_headers:
          - Content-Length
          - Content-Range
      
      # The list of users. If the list is empty, then there will be no authentication.
      # Otherwise, basic authentication will automatically be configured.
      #
      # If you're delegating the authentication to a different service, you can proxy
      # the username using basic authentication, and then disable webdav's password
      # check using the option:
      #
      # noPassword: true
      users: []

# Configuration for the generic subchart
generic:
  # Override naming to use "webdav" instead of "generic"
  nameOverride: "webdav"
  
  # Override image settings for WebDAV (using hacdias/webdav)
  image:
    repository: ghcr.io/hacdias/webdav
    pullPolicy: IfNotPresent
    tag: "v5.8.0"  # Must be explicit for dependency charts

  # Service configuration
  service:
    type: ClusterIP
    port: 6065
    targetPort: http
    protocol: TCP
    portName: http

  # Container port configuration
  containerPort: 6065

  # ServiceAccount configuration
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  # Single replica for WebDAV
  replicaCount: 1

  # Pod configuration
  podAnnotations: {}
  podLabels: {}
  imagePullSecrets: []

  # Node scheduling
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # WebDAV specific environment variables
  env:
    - name: WEBDAV_AUTH_TYPE
      value: "none"
    - name: WEBDAV_SCOPE
      value: "/data"

  # Configure persistence for WebDAV data
  persistence:
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 16Gi
    mountPath: /data
    annotations: {}
    labels: {}

  # Additional volume for WebDAV config
  volumes:
    - name: webdav-config
      configMap:
        name: webdav-config

  # Additional volume mount for WebDAV config
  volumeMounts:
    - name: webdav-config
      mountPath: /config
      readOnly: true

  # Container args to use config file
  args:
    - "-c=/config/config.yaml"

  # Resource limits and requests
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Health checks
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000

  # ServiceMonitor for Prometheus monitoring (disabled by default for WebDAV)
  serviceMonitor:
    enabled: false
    portName: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

  # Ingress configuration (recommended for WebDAV external access)
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # Common annotations for WebDAV
      # nginx.ingress.kubernetes.io/proxy-body-size: "0"
      # nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      # For Traefik (as per your setup):
      # traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
      # traefik.ingress.kubernetes.io/router.middlewares: authentik-ak-outpost-authentik-embedded-outpost@kubernetescrd
    hosts:
      - host: webdav.local
        paths:
          - path: /
            pathType: Prefix
    tls: []
      # - secretName: webdav-tls
      #   hosts:
      #     - webdav.local
